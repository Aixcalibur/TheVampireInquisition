start_vi_investigate_interaction = {
	icon = debug_secret
	#interface_priority = 100
	category = interaction_category_hostile

	send_name = START_SCHEME

	scheme = vi_investigate

	# cooldown = {
	# 	years = 1
	# }

	cooldown_against_recipient = {
		years = 10
	}
	
	ignores_pending_interaction_block = yes

	ai_targets = {
		ai_recipients = liege
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		ai_recipients = spouses
		ai_recipients = vassals
		ai_recipients = scripted_relations
		max = 20
	}

	ai_frequency = 12 #We do want this to be a very common scheme for AI to do
	
	is_shown = {
		scope:actor = {
			is_ruler = yes
			vi_is_vampire_trigger = no
		}

		OR = {
			scope:actor = {
				has_opinion_modifier = {
					modifier = suspicion_opinion
					target = scope:recipient
				}
			}
			scope:recipient = {
				has_government = vi_vampire_government
			}
			scope:actor = {
				has_trait = vi_inquisitor
			}
		}

		NOT = {
			scope:recipient = {
				has_trait = vi_dormant
			}
		}

		scope:recipient != scope:actor
		
		scope:recipient = {
			vi_is_vampire_trigger = yes
			
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			age >= 12
			is_imprisoned = no

			custom_tooltip = {
				text = vi_investigate_requirements
				OR = {
					has_opinion_modifier = {
						modifier = suspicion_opinion
						target = scope:recipient
					}
					has_trait = vi_inquisitor
				}
			}

			can_start_scheme = {
				type = vi_investigate
				target_character = scope:recipient
			}
		}

		# scope:recipient = {
		# 	NOT = {
		# 		is_landed_or_landless_administrative = yes
		# 	}
		# }


	}

	desc = start_vi_investigate_interaction_desc

	on_accept = {
		scope:actor = {
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = start_vi_investigate_notification

				left_icon = scope:actor
				right_icon = scope:recipient

				begin_scheme_basic_effect = {
					SCHEME_TYPE = vi_investigate
					TARGET_TYPE = target_character
					TARGET_SCOPE = scope:recipient
				}
			}
			# Scheme bonuses from being the emperor/dominant family/powerful family
			# ep3_actor_scheme_modifier_effect = yes
			custom_tooltip = vi_investigate_success_actor_tt
		}
		scope:recipient = {
			save_scope_as = target
			#custom_tooltip = vi_investigate_success_recipient_tt
		}
	}

	ai_potential = {
		NOT = {
			any_scheme = {
				is_scheme_category = hostile
			}
		}
		is_ruler = yes
	}
	
	auto_accept = yes

	ai_will_do = {
		base = 5

		#Personality
		modifier = {
			has_trait = zealous
			add = 25
		}

		modifier = {
			has_trait = cynical
			add = 25
		}

		modifier = {
			has_trait = paranoid
			add = 50
		}

		modifier = {
			has_trait = trusting
			add = -50
		}

		modifier = {
			has_trait = craven
			add = -10
		}

		modifier = {
			has_trait = vi_inquisitor
			add = 50
		}

		# House & Family

		#Feuds
		modifier = {
			house.house_head ?= {
				any_owned_story = {
					story_type = story_cycle_house_feud
					has_variable = house_feud_house
					var:house_feud_house = scope:recipient.house
				}
			}
			add = 50
		}

		# Relationships
		modifier = {
			add = 25
			has_any_mild_bad_relationship_with_character_trigger = { CHARACTER = scope:recipient }
		}

		modifier = {
			add = 50
			has_any_moderate_bad_relationship_with_character_trigger = { CHARACTER = scope:recipient }
		}

		modifier = {
			add = 100
			has_any_worst_bad_relationship_with_character_trigger = { CHARACTER = scope:recipient }
		}

		modifier = {
			add = -15
			has_any_mild_good_relationship_with_character_trigger = { CHARACTER = scope:recipient }
		}

		modifier = {
			add = -20
			has_any_moderate_good_relationship_with_character_trigger = { CHARACTER = scope:recipient }
		}

		modifier = {
			factor = 0
			has_any_best_good_relationship_with_character_trigger = { CHARACTER = scope:recipient }
		}
	}
}
