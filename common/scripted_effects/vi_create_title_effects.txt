vi_procure_estate_interaction_effect = {
	if = {
		limit = {
			scope:piety_option = yes
		}
		if = {
			limit = {
				faith = {
					NOT = {
						this = scope:recipient.faith
					}
				}
			}
			set_character_faith = scope:recipient.faith
			add_character_flag = {
				flag = procure_estate_conversion
				months = 1
			}
		}
		scope:recipient = {
			add_piety = {
				value = procure_estate_interaction_cost_base_piety
				multiply = 0.5
			}
		}
	}
	else_if = {
		limit = {
			scope:gold_option = yes
		}
		show_as_tooltip = {
			pay_short_term_gold = {
				target = scope:recipient
				gold = procure_estate_interaction_cost_base_gold
			}
		}
		hidden_effect = {
			scope:recipient = { add_gold = procure_estate_interaction_cost_base_gold }
		}
	}
	else_if = {
		limit = {
			scope:hook = yes
		}
	}
	else = {
		scope:recipient = {
			add_prestige = {
				value = procure_estate_interaction_cost_base_prestige
				multiply = 0.25
			}
		}
	}
	scope:recipient = {
		change_influence = medium_influence_loss
		add_hook = {
			target = scope:actor
			type = favor_hook
		}
	}
	#Scope:actor becomes ladmin
	scope:actor = {
		if = {
			limit = {
				scope:actor.house ?= {
					any_house_member = {
						any_held_title = {
							is_noble_family_title = yes
						}
						top_liege = {
							this = scope:recipient.top_liege
						}
					}
				}
			}
			found_cadet_house_decision_effect = {
				CHARACTER = scope:actor
				PRESTIGE = major_prestige_gain
			}
		}
		# Note our courtiers so that they don't escape.
		every_courtier = { add_to_list = courtiers_list }
		# Change liege
		destroy_laamp_effect = { ADVENTURER = scope:actor }
		hidden_effect  = {
			scope:recipient.top_liege = {
				add_courtier = scope:actor
				return_to_court = yes
			}
		}

		create_noble_family_effect = yes
		
		hidden_effect = {
			# Return any escaped courtiers.
			every_in_list = {
				list = courtiers_list
				scope:actor = { add_courtier = prev }
			}
			# And boot any new autogenned arrivals.
			every_courtier = {
				limit = {
					is_lowborn = yes
					NOR = {
						is_in_list = courtiers_list
						is_close_or_extended_family_of = scope:actor
						is_consort_of = scope:actor
						has_relation_vi_sire = scope:actor
						has_relation_vi_spawn = scope:actor
						has_important_relationship_trigger = { CHARACTER = scope:actor }
					}
				}
				silent_disappearance_effect = yes
			}
		}
		create_title_and_vassal_change = {
			type = swear_fealty
			add_claim_on_loss = no
			save_scope_as = title_change
		}
		change_liege = {
			liege = scope:recipient.top_liege
			change = scope:title_change
		}
		resolve_title_and_vassal_change = scope:title_change
		change_government = vi_vampire_government

		
	}
	scope:recipient.top_liege = {
		if = {
			limit = {
				is_ai = no
			}
			send_interface_message = {
				type = msg_landless_adventurer_nearby
				title = procure_estate_message_title
				left_icon = scope:actor
				right_icon = scope:recipient
				custom_tooltip = procure_estate_message_tt
			}
		}
		every_vassal_or_below = {
			limit = {
				is_ai = no
			}
			send_interface_message = {
				type = msg_landless_adventurer_nearby
				title = procure_estate_message_title
				left_icon = scope:actor
				right_icon = scope:recipient
				custom_tooltip = procure_estate_message_tt
			}
		}
	}
}

vi_adventure_create_princedom_effect = {
	
	save_scope_as = actor
	#Scope:actor becomes ladmin
	domicile.domicile_location.county = {
		save_scope_as = vi_title_county
	}

	if = {
		limit = {
			NOT = {
				this = house.house_head
			}
		}
		found_cadet_house_decision_effect = {
			CHARACTER = scope:actor
			PRESTIGE = major_prestige_gain
		}
	}
	# Note our courtiers so that they don't escape.
	every_courtier = { add_to_list = courtiers_list }
	destroy_laamp_effect = { ADVENTURER = scope:actor }


	vi_create_noble_family_effect = yes
	
	create_dynamic_title = {
		tier = kingdom
		name = VI_NEW_CREATED_HIGH_PRINCEDOM_NAME
	}

	create_title_and_vassal_change = {
		type = created
		save_scope_as = change
		add_claim_on_loss = no
	}

	hidden_effect = {
		scope:new_title = {
			change_title_holder = {
				holder = scope:actor
				change = scope:change
			}
			set_capital_county = scope:vi_title_county
			set_coa = scope:vi_title_county
			set_can_be_named_after_dynasty = no
			set_landless_title = yes
			set_definitive_form = yes
			add_title_law = vi_vampire_elective_succession_law
		}
	}
	
	resolve_title_and_vassal_change = scope:change
	
	
	

	every_held_title = {
		limit = {
			is_noble_family_title = yes
		}
		set_capital_county = scope:vi_title_county
	}



	

	hidden_effect = {
		change_government = vi_vampire_government
		vi_create_domicile_title_effect = yes
	}

	hidden_effect = {
		# Return any escaped courtiers.
		every_in_list = {
			list = courtiers_list
			scope:actor = { add_courtier = prev }
		}
		# And boot any new autogenned arrivals.
		every_courtier = {
			limit = {
				is_lowborn = yes
				NOR = {
					is_in_list = courtiers_list
					is_close_or_extended_family_of = scope:actor
					is_consort_of = scope:actor
					has_relation_vi_sire = scope:actor
					has_relation_vi_spawn = scope:actor
					has_important_relationship_trigger = { CHARACTER = scope:actor }
				}
			}
			silent_disappearance_effect = yes
		}
	}
}

vi_create_vassal_princedom_effect = {

	save_scope_as = founder

	$VI_LIEGE$ = {
		save_scope_as = vi_liege
	}

	$VI_COUNTY$ = {
		save_scope_as = vi_title_county

		add_county_modifier = {
			modifier = vi_county_discreet_modifier
			years = 2
		}
	}
	# create_adventurer_title = {
	# 	name = VI_NEW_CREATED_PRINCEDOM_NAME
	# 	holder = scope:founder
	# 	#article = DEFAULT_TITLE_NAME_ARTICLE
	# 	save_scope_as = new_title
	# }

	create_dynamic_title = {
		tier = duchy
		name = VI_NEW_CREATED_PRINCEDOM_NAME
	}
	create_title_and_vassal_change = {
		type = created
		save_scope_as = change
		add_claim_on_loss = no
	}
	scope:new_title = {
		change_title_holder = {
			holder = scope:founder
			change = scope:change
		}
		set_capital_county = scope:vi_title_county
		set_coa = scope:vi_title_county
		set_landless_title = yes
		# add_title_law = vi_vampire_elective_succession_law
	}

	# every_held_title = {
	# 	limit = {
	# 		tier >= scope:vi_liege.primary_title.tier
	# 	}
	# 	scope:founder = {
	# 		destroy_title = prev
	# 	}
	# }

	# change_liege = {
	# 	liege = scope:vi_liege
	# 	change = scope:change
	# }
	
	resolve_title_and_vassal_change = scope:change

	start_tributary = {
		contract_group = tributary_settled
		suzerain = scope:vi_liege
	}

	add_truce_both_ways = {
		character = scope:vi_liege
		years = 25
		name = TRUCE_TRIBUTARY
	}

	vi_create_domicile_title_effect = yes

	destroy_title = scope:new_title

	vi_recenter_domicile_effect = yes

	


	# hidden_effect = {
	# 	scope:new_title = {
	# 		# set_de_jure_liege_title = scope:vi_liege.primary_title
	# 		set_coa = scope:vi_title_county
	# 		set_capital_county = scope:vi_title_county
	# 	}
	# }
}

vi_create_domicile_title_effect = {
	save_scope_as = founder
	if = {
		limit = {
			is_ruler = yes
		}
		capital_county = {
			save_scope_as = vi_title_county
		}
	}
	

	give_noble_family_title = {
		name = noble_family_name
		tier = county
		article = DEFAULT_TITLE_NAME_ARTICLE
		government = vi_vampire_government
		save_scope_as = new_quarters_title
	}
	# create_nomad_title = {
	# 	name = vi_nomad_title_name
	# 	#pre = "sdfsd"
	# 	holder = scope:founder
	# 	prefix = "vi_princedom"
	# 	government = vi_vampire_government
	# 	save_scope_as = new_quarters_title
	# }
	scope:new_quarters_title = {
		#set_definitive_form = no
		#reset_title_prefix = yes
	}
	# vi_delete_yurt_buildings_effect = yes
}

vi_delete_yurt_buildings_effect = {
	# no longer need this
	# domicile = { remove_domicile_building = herd_welfare_yurt_03 }
	# domicile = { remove_domicile_building = character_warfare_yurt_03 }
	# domicile = { remove_domicile_building = mass_warfare_yurt_03 }
	# domicile = { remove_domicile_building = court_yurt_03 }
	# domicile = { remove_domicile_building = family_yurt_03 }
	# domicile = { remove_domicile_building = mystical_yurt_03 }
	# domicile = { remove_domicile_building = trade_yurt_03 }
}

vi_create_noble_family_effect = {
	debug_log = create_noble_family_title

	save_scope_as = new_noble_family_holder
	hidden_effect = { # NF can only be held by house heads
		if = { # Start by checking that we are not the house head already
			limit = {
				house ?= {
					house_head != scope:new_noble_family_holder
				}
			}
			create_cadet_branch = yes
		}
	}
	give_noble_family_title = {
		name = noble_family_name
		tier = county
		article = DEFAULT_TITLE_NAME_ARTICLE
		save_scope_as = new_title
		government = vi_vampire_government
	}
	scope:new_title = {
		holder = {
			save_scope_as = noble_family_head
		}
		set_coa = scope:noble_family_head.house
		if = {
			limit = {
				exists = scope:vi_title_county
			}
			set_capital_county = scope:vi_title_county
		}
	}
	custom_description = {
		text = create_noble_family_tt
	}

	#change_government = vi_vampire_government

	#Notifications
	# top_liege ?= {
	# 	every_vassal = {
	# 		limit = {
	# 			is_ai = no
	# 			NOT = { this = scope:new_noble_family_holder }
	# 		}
	# 		trigger_event = {
	# 			id = ep3_emperor_yearly.2410
	# 			days = 1
	# 		}
	# 	}
	# }

	debug_log_scopes = yes
}

debug_vi_title_effect = {
	every_vassal = {
		# limit = {
		# 	NOT = {
		# 		any_title = {
		# 			OR = {
		# 				is_nomad_title = yes
		# 				is_noble_family_title = yes
		# 			}
					
		# 		}
		# 	}
		# }
		vi_create_domicile_title_effect = yes
	}
}

debug_tributize_random_ruler = {
	random_ruler = {
		limit = {
			is_independent_ruler = no
			is_landed = yes
		}
		# start_tributary = {
		# 	contract_group = tributary_subjugated
		# 	suzerain = root
		# }
		save_scope_as = le_tributary
	}

	start_tributary_interaction_effect = {
		TRIBUTARY = scope:le_tributary
		SUZERAIN = root
	}
}





debug_paladins_effect = {
	character:vi_roland = {
		create_paladins_title_effect = yes
	}
}

create_paladins_title_effect = {
	save_scope_as = new_landless_adventurer
	if = {
		limit = {
			exists = house
		}
		house = { save_scope_as = new_landless_adventurer_house }
	}
	if = {
		limit = {
			exists = location
		}
		location = { save_scope_as = new_landless_adventurer_location }
	}
	save_scope_value_as = {
		name = adventurer_creation_reason
		value = flag:voluntary
	}
	scope:new_landless_adventurer = { save_scope_as = adventurer_flavor_char }
	hidden_effect = {
		
		# create_adventurer_title = {
		# 	name = d_laamp_vi_paladins
		# 	holder = scope:new_landless_adventurer
		# 	article = DEFAULT_TITLE_NAME_ARTICLE
		# 	save_scope_as = new_title
		# }

		create_title_and_vassal_change = {
			type = created
			save_scope_as = change
			add_claim_on_loss = no
		}
		title:d_laamp_vi_paladins ?= {
			create_landless_adventurer_title_history_effect = yes
			set_variable = {
				name = adventurer_creation_reason
				value = scope:adventurer_creation_reason
			}
			set_variable = {
				name = adventurer_flavor_char
				value = scope:adventurer_flavor_char
			}
			change_title_holder = {
				holder = scope:new_landless_adventurer
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
		scope:new_title = { save_scope_as = new_landless_adventurer_title }
		scope:new_landless_adventurer = {
			if = {
				limit = {
					NOT = { has_government = landless_adventurer_government }
				}
				change_government = landless_adventurer_government
			}
			if = {
				limit = {
					NOT = { has_realm_law = landless_adventurer_succession_law }
				}
				add_realm_law = landless_adventurer_succession_law
			}
			if = {
				limit = {
					has_realm_law = crown_authority_0
				}
				remove_realm_law = crown_authority_0
			}
			domicile = { change_provisions = starting_provisions_value }
		}
	}
	custom_tooltip = laamp_become_adventurer_tt
	if = {
		limit = {
			OR = {
				scope:adventurer_creation_reason = flag:deposition
				scope:adventurer_creation_reason = flag:conquest
				scope:adventurer_creation_reason = flag:exile
			}
		}
		add_opinion = {
			target = $FLAVOR_CHAR$
			modifier = demanded_eviction_opinion
		}
		remove_laamp_from_exiled_county_automatically_effect = {
			PROVINCE = scope:new_landless_adventurer.location
			LAAMP = scope:new_landless_adventurer
		}
		save_scope_value_as = {
			name = expelled
			value = yes
		}
	}
	hidden_effect = {
		if = {
			limit = {
				scope:new_landless_adventurer = {
					is_ai = no
				}
				NOT = { exists = scope:expelled }
			}
			populate_location_with_contracts_effect = {
				AREA_CHAR = scope:new_landless_adventurer
				AMOUNT = 3
			}
		}
		scope:new_landless_adventurer = {
			every_councillor = {
				if = {
					limit = {
						NOR = {
							has_council_position = councillor_court_chaplain
							has_council_position = councillor_spouse
						}
					}
					scope:new_landless_adventurer = {
						fire_councillor = prev
					}
					remove_opinion = {
						modifier = fired_from_council_opinion
						target = scope:new_landless_adventurer
					}
				}
				else_if = {
					limit = {
						NOR = {
							is_close_or_extended_family_of = scope:new_landless_adventurer
							has_relation_lover = scope:new_landless_adventurer
							has_relation_friend = scope:new_landless_adventurer
							is_consort_of = scope:new_landless_adventurer
							has_council_position = councillor_spouse
						}
					}
					death = {
						death_reason = death_vanished
					}
				}
			}
			every_courtier = {
				limit = {
					NOR = {
						is_close_or_extended_family_of = scope:new_landless_adventurer
						has_relation_lover = scope:new_landless_adventurer
						has_relation_friend = scope:new_landless_adventurer
						is_consort_of = scope:new_landless_adventurer
					}
				}
				move_to_pool = yes
			}
			# Give us a couple of starting chars if we're almost completely bereft.
			if = {
				limit = {
					any_courtier = { count <= 2 }
				}
				trigger_event = {
					id = ep3_laamps.1001
					weeks = { 2 6 }
				}
			}
		}
		trigger_event = { id = misc.0001 days = 1 }
		local_arbitration_boon_change_purpose_effect = yes
	}
	add_to_global_variable_list = {
		name = laamps_tally
		target = scope:new_landless_adventurer.primary_title
	}
	set_variable = flavourise_camp_purpose_wanderers
}