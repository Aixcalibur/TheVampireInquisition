vi_hunt_interaction = {
	icon = icon_dead
	common_interaction = yes
	interface_priority = 100
	category = interaction_category_hostile

	ignores_pending_interaction_block = yes

	scheme = vi_hunt

	send_name = START_SCHEME

	is_shown = {
		NOT = { scope:recipient = scope:actor }

		NOT = { scope:recipient = { is_imprisoned_by = scope:actor } }

		scope:actor = {
			vi_is_vampire_trigger = yes
		}

		NAND = { # Game Rules!
			has_game_rule = no_players_multiplayer_murder_schemes
			scope:actor = {
				is_ai = no
			}
			scope:recipient = {
				is_ai = no
			}
		}

		NAND = {
			has_game_rule = no_player_families_multiplayer_murder_schemes
			scope:actor = {
				is_ai = no
			}
			scope:recipient = {
				OR = {
					is_ai = no
					any_close_family_member = {
						AND = {
							is_ai = no
							NOT = { this = scope:actor }
						}
					}
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			can_start_scheme = {
				type = vi_hunt
				target_character = scope:recipient
			}
		}
		NOT = { scope:recipient = { is_imprisoned_by = scope:actor } }
		
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }

		trigger_if = {
			limit = {
				scope:actor = {
					is_landless_adventurer = yes
				}
			}
			#Has to be used instead of diplo range checks in laamp to landed interactions
			ep3_laamp_diplo_range_trigger = {
				TARGET = scope:recipient
				LAAMP = scope:actor
			}
		}
	}

	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:actor = {
						vi_is_vampire_trigger = yes
					}
				}
				desc = vi_hunt_interaction_vampire_desc
			}
			desc = vi_hunt_interaction_desc
		}
		
	}

	# Scheme Starter Packages
	options_heading = schemes.t.agent_packages
	send_options_exclusive = yes
	## Balanced agents.
	send_option = {
		flag = agent_focus_balance
		current_description = start_murder_interaction.tt.agent_focus_balance
	}
	## Focused on Success Chance.
	send_option = {
		flag = agent_focus_success
		current_description = start_murder_interaction.tt.agent_focus_success
	}
	## Focused on Speed.
	send_option = {
		flag = agent_focus_speed
		current_description = start_murder_interaction.tt.agent_focus_speed
	}
	## Focused on Secrecy.
	send_option = {
		flag = agent_focus_secrecy
		current_description = start_murder_interaction.tt.agent_focus_secrecy
	}

	on_accept = {
		scope:actor = {
			stress_impact = {
				compassionate = major_stress_impact_gain
				honest = medium_stress_impact_gain
				just = medium_stress_impact_gain
			}
		}
		scope:actor = {
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = start_murder_interaction_notification

				left_icon = scope:actor					
				right_icon = scope:recipient

				# Success.
				if = {
					limit = { scope:agent_focus_success ?= yes }
					begin_scheme_with_agents_effect = {
						SCHEME_TYPE = vi_hunt
						TARGET_TYPE = target_character
						TARGET_SCOPE = scope:recipient
						# Success.
						AGENT_1 = agent_scout
						AGENT_2 = agent_scout
						AGENT_3 = agent_thug
						# Speed.
						AGENT_4 = agent_infiltrator
						# Secrecy.
						AGENT_5 = agent_decoy
					}
				}
				# Speed.
				else_if = {
					limit = { scope:agent_focus_speed ?= yes }
					begin_scheme_with_agents_effect = {
						SCHEME_TYPE = vi_hunt
						TARGET_TYPE = target_character
						TARGET_SCOPE = scope:recipient
						# Speed.
						AGENT_1 = agent_infiltrator
						AGENT_2 = agent_infiltrator
						AGENT_3 = agent_footpad
						# Success.
						AGENT_4 = agent_scout
						# Secrecy.
						AGENT_5 = agent_decoy
					}
				}
				# Secrecy.
				else_if = {
					limit = { scope:agent_focus_secrecy ?= yes }
					begin_scheme_with_agents_effect = {
						SCHEME_TYPE = vi_hunt
						TARGET_TYPE = target_character
						TARGET_SCOPE = scope:recipient
						# Secrecy.
						AGENT_1 = agent_decoy
						AGENT_2 = agent_decoy
						AGENT_3 = agent_lookout
						# Success.
						AGENT_4 = agent_scout
						# Speed.
						AGENT_5 = agent_infiltrator
					}
				}
				# Balanced.
				else = {
					begin_scheme_with_agents_effect = {
						SCHEME_TYPE = vi_hunt
						TARGET_TYPE = target_character
						TARGET_SCOPE = scope:recipient
						# Success.
						AGENT_1 = agent_scout
						AGENT_2 = agent_scout
						# Speed.
						AGENT_3 = agent_infiltrator
						AGENT_4 = agent_footpad
						# Secrecy.
						AGENT_5 = agent_decoy
					}
				}
			}
			# Plus any on_start modifiers we may need.
			if = {
				limit = { var:feast_events_ewan_0001_bonus_value ?= scope:recipient }
				# Hand over the modifier.
				random_scheme = {
					limit = {
						scheme_type = vi_hunt
						scheme_target_character = scope:recipient
					}
					add_scheme_modifier = { type = feast_learnt_habits_modifier }
				}
				# Remove the variable now that we're done with it.
				remove_variable = feast_events_ewan_0001_bonus_value
			}
		}
	}
	
	auto_accept = yes

	# AI for murders is handled in event murder_scheme_maintenance.1, fired from the five_year_playable_pulse
}
