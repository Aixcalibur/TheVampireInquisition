vi_investigate = {
	# Basic Setup
	skill = intrigue
	desc = "challenge_status_desc_general"
	success_desc = "CHALLENGE_STATUS_SUCCESS_DESC"
	icon = icon_scheme_challenge_status
	illustration = "gfx/interface/illustrations/event_scenes/corridor.dds"
	target_type = character
	category = hostile
	cooldown = { years = 10 }

	# Travel Triggers (default no)
	freeze_scheme_when_traveling = yes
	freeze_scheme_when_traveling_target = no

	# Parameters
	speed_per_skill_point = t2_spsp_owner_value
	speed_per_target_skill_point = t2_spsp_target_value
	spymaster_speed_per_skill_point = t2_spsp_owner_spy_value
	target_spymaster_speed_per_skill_point = t2_spsp_target_spy_value
	tier_speed = 1
	base_progress_goal = t3_base_phase_length_value
	base_maximum_success = t2_base_max_success_value
	phases_per_agent_charge = 1
	success_chance_growth_per_skill_point = t2_scgpsp_value

	is_secret = no

	# Core Triggers
	allow = {
		is_adult = yes
		is_imprisoned = no
		is_ruler = yes
	}

	valid = {
		has_opinion_modifier = {
			modifier = suspicion_opinion
			target = scope:target
		}
		scope:target = {
			vi_is_vampire_trigger = yes
		}
	}

	# Agents
	agent_leave_threshold = -25
	agent_join_chance = {
		base = 0
		ai_agent_join_chance_basic_suite_modifier = yes
		ai_agent_join_chance_hostile_general_suite_modifier = yes
		ai_agent_join_chance_political_suite_modifier = yes
	}
	agent_groups_owner_perspective = { peer_vassals courtiers vassals councillors }
	agent_groups_target_character_perspective = { courtiers vassals councillors }
	valid_agent = { is_valid_agent_standard_trigger = yes }

	odds_prediction = {
		add = base_odds_prediction_target_is_char_value
		add = odds_skill_contribution_intrigue_value
		add = agent_groups_owner_perspective_value
		add = agent_groups_target_character_perspective_value
		min = 0
	}

	# Base Chances
	base_success_chance = {
		base = 0
		scheme_type_skill_success_chance_modifier = { SKILL = INTRIGUE }
		
		# Target's intrigue
		modifier = {
			desc = "INTRIGUE_SKILL_REASON"
			add = {
				value = scope:target.intrigue
				multiply = -2
			}
		}

		# Family Feud
		house_feud_hostile_scheme_success_modifier = yes
		
		# Target's traits
		modifier = { # Target is paranoid, therefore leaves few clues
			scope:target = { has_trait = paranoid }
			desc = "SCHEME_TRAIT_PARANOID"
			add = -100
		}
		
		# House
	}

	# On Actions
	on_start = {
		# Fallback agents — a balanced config if you start the scheme from script.
		if = {
			limit = {
				scheme_owner = {
					NOT = { has_variable = agents_added }
				}
			}
			add_agent_slot = agent_proponent
			add_agent_slot = agent_intermediary
			add_agent_slot = agent_political_socialite
			add_agent_slot = agent_bureaucrat
			add_agent_slot = agent_amanuensis
		}
	}
	on_phase_completed = {

		save_scope_as = scheme
		scheme_target_character = { save_scope_as = target }
		scheme_owner = { save_scope_as = owner }
		scope:scheme = {
			scheme_owner = {
				#DISCOVERY ROLL
				# save_scope_value_as = {
				# 	name = discovery_chance
				# 	value = {
				# 		value = 100
				# 		subtract = scope:scheme.scheme_secrecy
				# 	}
				# }
				# random = {
				# 	chance = scope:discovery_chance
				# 	save_scope_value_as = {
				# 		name = scheme_discovered
				# 		value = yes
				# 	}
				# }

				#SUCCESS ROLL
				random = {
					chance = scope:scheme.scheme_success_chance

					save_scope_value_as = {
						name = scheme_successful
						value = yes
					}
				}

				#SECRECY: DO I WANT TO PROCEED?
				if = {
					limit = { exists = scope:scheme_successful }
					trigger_event = vi_investigate.001 #Success event
				}
				else = {
					trigger_event = {
						on_action = convert_to_witchcraft_failure_outcome
					}
				}
			}
		}
	}
	on_hud_click  = { challenge_status_scheme_prep_effect = yes }
	on_semiyearly = {
		if = {
			limit = {
				scheme_owner = { is_ai = yes }
			}
			challenge_status_scheme_prep_effect = yes
		}
	}

	## Invalidation
	on_invalidated = {
		scheme_target_character = {
			save_scope_as = target
		}
		scheme_owner = {
			save_scope_as = owner
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = challenge_status_invalidated_title
				left_icon = scope:target
				if = { # Invalidation due to death
					limit = {
						scope:target = { is_alive = no }
						NOT = { block_death_event_trigger = { DEAD = scope:target } }
						scope:owner = { is_alive = yes }
					}
					custom_tooltip = scheme_target_died
				}
				else_if = { # No more diplo range
					limit = {
						scope:target = { 
							NOT = { in_diplomatic_range = scope:owner } 
						}
					}
					custom_tooltip = scheme_target_not_in_diplomatic_range
				}
			}
		}
	}

	## Ongoing
	on_monthly = { fire_generic_contract_scheme_on_going_events_effect = yes }
}
