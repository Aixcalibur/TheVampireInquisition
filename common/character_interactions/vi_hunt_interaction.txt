vi_hunt_interaction = {
	icon = icon_dead
	common_interaction = yes
	interface_priority = 100
	category = interaction_category_hostile

	ignores_pending_interaction_block = yes

	scheme = vi_hunt

	send_name = START_SCHEME

	is_shown = {
		NOT = { scope:recipient = scope:actor }

		NOT = { scope:recipient = { is_imprisoned_by = scope:actor } }

		scope:actor = {
			vi_is_vampire_trigger = yes
		}

		NOT = {
			scope:recipient = {
				has_trait = vi_dormant
			}
		}

		NAND = { # Game Rules!
			has_game_rule = no_players_multiplayer_murder_schemes
			scope:actor = {
				is_ai = no
			}
			scope:recipient = {
				is_ai = no
			}
		}

		NAND = {
			has_game_rule = no_player_families_multiplayer_murder_schemes
			scope:actor = {
				is_ai = no
			}
			scope:recipient = {
				OR = {
					is_ai = no
					any_close_family_member = {
						AND = {
							is_ai = no
							NOT = { this = scope:actor }
						}
					}
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			can_start_scheme = {
				type = vi_hunt
				target_character = scope:recipient
			}
		}
		NOT = { scope:recipient = { is_imprisoned_by = scope:actor } }
		
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }

		trigger_if = {
			limit = {
				scope:actor = {
					is_landless_adventurer = yes
				}
			}
			#Has to be used instead of diplo range checks in laamp to landed interactions
			ep3_laamp_diplo_range_trigger = {
				TARGET = scope:recipient
				LAAMP = scope:actor
			}
		}

		scope:recipient = {
			NOT = {
				vi_has_holy_artifact_equipped_trigger = yes
			}
		}

		trigger_if = {
			limit = {
				scope:recipient = {
					NOT = {
						vi_is_vampire_trigger = yes
					}
					OR = {
						is_ruler = yes
						AND = {
							is_ruler = no
							is_close_family_of = employer
						}
					}
				}
			}
			custom_tooltip = {
				text = vi_hunt_too_guarded_tt
				#always = no
				scope:actor = {
					OR = {
						has_perk = vi_blink_perk
						has_perk = vi_shadowwalk_perk
					}
				}
			}
		}

		trigger_if = {
			limit = {
				scope:recipient = {
					OR = {
						has_trait = vi_vampire_2
						has_trait = vi_vampire_3
						has_trait = vi_vampire_4
						has_trait = vi_vampire_5
					}
					is_ruler = yes
				}
			}
			custom_tooltip = {
				text = vi_hunt_too_guarded_vampire_tt
				#always = no
				scope:actor = {
					has_perk = vi_shadowwalk_perk
				}
			}
		}
	}

	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:actor = {
						vi_is_vampire_trigger = yes
					}
				}
				desc = vi_hunt_interaction_vampire_desc
			}
			desc = vi_hunt_interaction_desc
		}
		
	}

	on_accept = {
		scope:actor = {
			stress_impact = {
				compassionate = major_stress_impact_gain
				honest = medium_stress_impact_gain
				just = medium_stress_impact_gain
			}
		}
		scope:actor = {
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = start_murder_interaction_notification

				left_icon = scope:actor					
				right_icon = scope:recipient

				begin_scheme_basic_effect = {
					SCHEME_TYPE = vi_hunt
					TARGET_TYPE = target_character
					TARGET_SCOPE = scope:recipient
				}
			}
			# Plus any on_start modifiers we may need.
			if = {
				limit = { var:feast_events_ewan_0001_bonus_value ?= scope:recipient }
				# Hand over the modifier.
				random_scheme = {
					limit = {
						scheme_type = vi_hunt
						scheme_target_character = scope:recipient
					}
					add_scheme_modifier = { type = feast_learnt_habits_modifier }
				}
				# Remove the variable now that we're done with it.
				remove_variable = feast_events_ewan_0001_bonus_value
			}
		}
	}
	
	auto_accept = yes

	# Going to make it so hunts only happen when something special triggers it, partly for performance reasons
}
