vi_hunt = {
	# Basic Setup
	skill = intrigue
	desc = murder_desc_general
	success_desc = "vi_hunt_success_desc"
	discovery_desc = "vi_hunt_discovery_desc"
	icon = icon_scheme_hostile
	illustration = "gfx/interface/illustrations/event_scenes/corridor.dds"
	category = hostile
	target_type = character
	is_secret = yes
	maximum_breaches = 10
	cooldown = { years = 5 }

	is_basic = yes
	freeze_scheme_when_traveling = yes

	# Parameters
	speed_per_skill_point = t2_spsp_owner_value
	speed_per_target_skill_point = t3_spsp_target_value
	base_progress_goal = t3_base_phase_length_value #70 Days
	maximum_secrecy = 95
	base_maximum_success = 75
	#base_maximum_success = t2_base_max_success_value
	phases_per_agent_charge = 1
	success_chance_growth_per_skill_point = t2_scgpsp_value
	
	# Core Triggers
	allow = {
		is_imprisoned = no
		vi_is_vampire_trigger = yes
	}
	valid = {
		is_incapable = no
		trigger_if = {
			limit = {
				is_parent_of = scope:target
				NOT = {
					has_trait_with_flag = can_murder_own_children
				}
			}
			NOT = { is_parent_of = scope:target }
		}
		custom_description = {
			object = scope:target
			text = "I_have_imprisoned_target"
			scope:target = {
				NOT = { imprisoner = scope:owner }
			}
		}
		scope:target = {
			OR = {
				exists = location
				in_diplomatic_range = scope:owner
			}
		}

		scope:target = {
			NOT = {
				has_trait = vi_dormant
			}
		}
		# Special AI exceptions
		NOT = {
			scope:owner = {
				is_ai = yes
				has_opinion_modifier = {
					target = scope:target
					modifier = repentant_opinion
				}
			}
		}

		NOT = {
			scope:target = {
				vi_has_holy_artifact_equipped_trigger = yes
			}
		}
	}

	# Agents
	# agent_leave_threshold = -25
	# agent_join_chance = {
	# 	base = -25
		
	# 	ai_agent_join_chance_basic_suite_modifier = yes
	# 	ai_agent_join_chance_hostile_grievous_modifier = yes
	# }
	# agent_groups_owner_perspective = { courtiers guests }
	# agent_groups_target_character_perspective = { courtiers guests }
	# valid_agent = { is_valid_agent_standard_trigger = yes }

	odds_prediction = {
		add = hostile_scheme_base_odds_prediction_target_is_char_value
		add = odds_skill_contribution_intrigue_value
		# add = agent_groups_owner_perspective_value
		# add = agent_groups_target_character_perspective_value
		add = odds_murder_scheme_misc_value
		min = 0
	}

	# Base Chances
	base_success_chance = {
		base = 0
		scheme_type_skill_success_chance_modifier = { SKILL = INTRIGUE }
		
		hostile_scheme_base_chance_modifier = yes

		# Countermeasures.
		apply_calculated_scheme_success_chance_adjustments_modifier = yes
		apply_opportunistic_scheme_success_chance_adjustments_modifier = yes
		
		modifier = {
			add = -50
			desc = "SCHEME_TARGET_IS_A_RULER"
			scope:target = {
				is_ruler = yes
			}
		}

		modifier = {
			add = 50
			desc = "VI_HUNT_TARGET_IS_TRAVELLING"
			scope:target = {
				is_travelling = yes
			}
		}

		modifier = {
			add = -25
			desc = "SCHEME_TARGET_LIEGE_HAS_COURT_ARTIFACT"
			scope:target = {
				is_ruler = no
				liege_or_court_owner = {
					vi_has_holy_court_artifact_trigger = yes
				}
			}
		}

		modifier = {
			add = -50
			desc = "SCHEME_TARGET_HAS_COURT_ARTIFACT"
			scope:target = {
				vi_has_holy_court_artifact_trigger = yes
			}
		}

		modifier = {
			add = -30
			desc = "SCHEME_TARGET_IS_A_DHAMPIR"
			scope:target = {
				has_trait = vi_dhampir
			}
		}

		modifier = {
			add = -25
			desc = "SCHEME_TARGET_IS_A_VAMPIRE"
			scope:target = {
				has_trait = vi_vampire_2
			}
		}

		modifier = {
			add = -50
			desc = "SCHEME_TARGET_IS_A_ELDER_VAMPIRE"
			scope:target = {
				has_trait = vi_vampire_3
			}
		}

		modifier = {
			add = -75
			desc = "SCHEME_TARGET_IS_A_ANCIENT_VAMPIRE"
			scope:target = {
				has_trait = vi_vampire_4
			}
		}

		modifier = {
			add = -100
			desc = "SCHEME_TARGET_IS_A_PROGENITOR_VAMPIRE"
			scope:target = {
				has_trait = vi_vampire_5
			}
		}

		modifier = {
			add = -50
			desc = "SCHEME_TARGET_IS_PARANOID"
			scope:target = {
				has_trait = paranoid
			}
		}

		modifier = {
			add = 25
			desc = "I_AM_A_VAMPIRE"
			scope:owner = {
				has_trait = vi_vampire_2
			}
		}

		modifier = {
			add = 50
			desc = "I_AM_A_ELDER_VAMPIRE"
			scope:owner = {
				has_trait = vi_vampire_3
			}
		}

		modifier = {
			add = 75
			desc = "I_AM_A_ANCIENT_VAMPIRE"
			scope:owner = {
				has_trait = vi_vampire_4
			}
		}

		modifier = {
			add = 200
			desc = "I_AM_A_PROGENITOR_VAMPIRE"
			scope:owner = {
				has_trait = vi_vampire_5
			}
		}

		# Imaginary friend told you to kill them
		modifier = {
			add = 50
			desc = "IMAGINARY_FRIEND_MURDER_BONUS"
			scope:owner = {
				exists = var:imaginary_friend_murder_target
				var:imaginary_friend_murder_target = scope:target
			}
		}
		
		# They crowned you king/queen of fools
		modifier = {
			add = 20
			desc = "MURDER_FOOL_NEMESIS_BONUS"
			scope:owner = {
				exists = var:festival_nemesis_fool_var
				var:festival_nemesis_fool_var = scope:target
			}
		}
		
		# You found their escape tunnel
		modifier = {
			add = 50
			desc = "SCHEME_DISCOVERED_ESCAPE_TUNNEL"
			scope:owner = {
				exists = var:discovered_escape_tunnel_of
				var:discovered_escape_tunnel_of = scope:target
			}
		}
		
		# You heard them explain their plan to your camp followers
		modifier = {
			add = 25
			desc = "SCHEME_ET_TU_BRUTE"
			scope:owner = {
				exists = var:et_tu_brute_var
				var:et_tu_brute_var = scope:target
			}
		}
		
		# You know where their chamber is
		modifier = {
			add = 25
			desc = "SCHEME_WNIGHT_VICTIM_CHAMBER"
			scope:owner = {
				exists = var:wnight_chandelier_murder_var
				var:wnight_chandelier_murder_var = scope:target
			}
		}

		modifier = {
			add = -25
			scope:target = {				
				has_opinion_modifier = {
					target = scope:owner
					modifier = attempted_murder_me_crime
				}
			}
			desc = HAS_ATTEMPTED_TO_MURDER_TARGET_BEFORE
		}
		
		# Spiritual Head of Faith
		modifier = {
			add = -25
			desc = "SCHEME_VS_SPIRITUAL_HOF"
			scope:target = {
				faith = scope:owner.faith
				faith = {
					has_doctrine = doctrine_spiritual_head
				}
				faith = {
					exists = religious_head
					religious_head = {
			 			this = scope:target
			 		}
				}
			}
		}

		# Sponsored Inspiration
		modifier = {
			add = -25
			desc = target_has_sponsored_inspiration
			scope:target = {
				exists = inspiration
				inspiration = { exists = inspiration_sponsor }
			}
		}

		# Family Feud
		house_feud_hostile_scheme_success_modifier = yes
		
		# At War
		first_valid = {
			modifier = {
				add = -100
				desc = "SCHEME_AT_WAR"
				scope:target = {
					is_at_war_with = scope:owner
				}
			}
			modifier = {
				add = -25
				scope:target = {
					is_playable_character = no
					exists = liege
					liege = {
						is_at_war_with = scope:owner
					}
				}
				desc = "SCHEME_AT_WAR_WITH_LIEGE"
			}
			modifier = {
				add = -25
				scope:target = {
					is_playable_character = yes
					exists = liege
					liege = {
						is_at_war_with = scope:owner
					}
				}
				desc = "SCHEME_AT_WAR_WITH_LIEGE"
			}
		}

		# Diarchs are better at schemes within their liege's realm
		diarch_scheming_within_realm_bonus_modifier = yes

		# Tailor

		modifier = {
			add = 10
			desc = feast_learnt_habits_modifier.tt
			scope:owner = {
				any_scheme = {
					scheme_type = murder
					scheme_target_character = scope:target
					has_scheme_modifier = feast_learnt_habits_modifier
				}
			}
		}

		# Caliph protection
		modifier = {
			add = -200
			scope:target = {
				has_character_modifier = fp3_struggle_caliph_super_suspicious_modifier
			}
			desc = has_fp3_struggle_caliph_super_suspicious_modifier
		}
	}

	base_secrecy = {
		add = 60 #We make this scheme more secretive since it's mostly a solo scheme
		add = secrecy_base_value
		add = countermeasure_apply_secrecy_maluses_value
	}

	# On Actions
	on_start = {
		set_variable = {
			name = apply_countermeasures
			value = flag:opportunistic
		}
		#add_scheme_starting_opportunities_intrigue_effect = yes
	}
	on_phase_completed = {
		# Grab our scopes.
		save_scope_as = scheme
		scheme_target_character = { save_scope_as = target }
		scheme_owner = { save_scope_as = owner }
		scope:scheme = {
			scheme_owner = {
				# DISCOVERY ROLL
				save_scope_value_as = {
					name = discovery_chance
					value = {
						value = 100
						subtract = scope:scheme.scheme_secrecy
					}
				}
				random = {
					chance = scope:discovery_chance
					save_scope_value_as = {
						name = scheme_discovered
						value = yes
					}
				}

				#SUCCESS ROLL
				random = {
					chance = scope:scheme.scheme_success_chance

					save_scope_value_as = {
						name = scheme_successful
						value = yes
					}
				}

				
				if = {
					limit = { exists = scope:scheme_successful }
					trigger_event = {
						on_action = vi_hunt_outcome_on_action
					}
				}
				else = {
					trigger_event = {
						id = vi_hunt_ongoing.0001
					}
				}
			}
		}
	}

	on_monthly = {
		# hostile_scheme_monthly_discovery_chance_effect = yes

		if = {
			limit = {
				NOT = { exists = scope:discovery_event_happening }
			}			
			# scheme_owner = {
			# 	trigger_event = {
			# 		on_action = murder_ongoing
			# 	}
			# }
		}
	}
	on_invalidated = {
		scheme_target_character = {
			save_scope_as = target
		}
		scheme_owner = {
			save_scope_as = owner
		}

		# if = { # If the target is part of the imaginary friend story cycle, fire this invalidation event, otherwise fire one of the normal ones
		# 	limit = {
		# 		scope:target = {
		# 			is_alive = no
		# 			NOT = { killer = scope:owner }
		# 		}
		# 		scope:owner = { var:imaginary_friend_murder_target ?= scope:target }
		# 	}
		# 	scope:owner = {
		# 		trigger_event = bp2_yearly.2023
		# 	}
		# }
		# else = {
		if = { #Did the character die in another way?
			limit = {
				scope:target = {
					is_alive = no
					NOT = { killer = scope:owner }
				}
			}
			scope:owner = {
				trigger_event = murder_outcome.2000
			}
		}

		if = { #Did the character move outside of diplomatic range
			limit = {
				scope:target = {
					NOT = { in_diplomatic_range = scope:owner }
				}
			}
			scope:owner = {
				trigger_event = murder_outcome.2500
			}
		}
		# }
	}
}
