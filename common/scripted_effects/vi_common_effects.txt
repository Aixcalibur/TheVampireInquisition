vi_make_vampire_effect = {

	add_character_flag = immune_to_disease
	add_character_flag = vi_vampire
	hidden_effect = {
		remove_character_modifier = vi_drained_modifier
		vi_remove_nonvampire_traits_effect = yes
	}

	if = {
		limit = {
			NOR = {
				exists = scope:vi_hide_vampirism
				has_trait = vi_vampire_2
				has_trait = vi_vampire_3
				has_trait = vi_vampire_4
				has_trait = vi_vampire_5
			}
		}
		add_trait = vi_vampire_1
	}

	if = {
		limit = {
			NOT = {
				exists = var:vi_humanity_value
			}
			NOR = {
				exists = scope:vi_hide_vampirism
				has_trait = vi_vampire_1
			}
		}
		vi_initialize_humanity_effect = yes
	}
	
	add_secret = {
		type = secret_vi_vampire
	}
	random_secret = { #Find the secret
		limit = {
			secret_type = secret_vi_vampire
		}
		disable_exposure_by = prev
	}

	add_character_modifier = vi_unnatural_youth_modifier

	every_child = {
		set_relation_vi_gui_sire = prev
	}

	# Make it so vampires don't get the vanilla stress events any more
	# EDIT: Actually, we'll just place this on the stress_on_action
	# add_character_flag = stress_threshold_event_3_cooldown
	# add_character_flag = stress_threshold_event_2_cooldown
	# add_character_flag = stress_threshold_event_1_cooldown

	# set_sexuality = asexual
}

vi_remove_nonvampire_traits_effect = {
	remove_trait = vi_dhampir
	remove_trait = incapable
	remove_trait = inappetetic
	remove_trait = comfort_eater
	remove_trait = drunkard
	remove_trait = hashishiyah
	remove_trait = rakish
}

vi_recenter_domicile_effect = {
	
	# random_held_title = {
	# 	limit = {
	# 		tier = highest_held_title_tier
	# 		is_noble_family_title = no
	# 	}
	# 	save_scope_as = destination
	# }

	primary_title.title_capital_county.title_province = {
		save_scope_as = destination
	}

	domicile ?= {
		move_domicile = scope:destination
	}

}

vi_upgrade_vampire_effect = {
	if = {
		limit = {
			has_trait = vi_vampire_1
		}
		add_trait = vi_vampire_2
		remove_trait = vi_vampire_1
	}
	else_if = {
		limit = {
			has_trait = vi_vampire_2
		}
		add_trait = vi_vampire_3
		remove_trait = vi_vampire_2
	}
	else_if = {
		limit = {
			has_trait = vi_vampire_3
		}
		add_trait = vi_vampire_4
		remove_trait = vi_vampire_3
	}
	if = {
		limit = {
			NOT = {
				exists = var:vi_humanity_value
			}
		}
		vi_initialize_humanity_effect = yes
	}
}

vi_turn_into_vampire_effect = {

	# $VI_VAMPIRE$ = {
	# 	save_scope_as = vi_vampire
	# }
	# $VI_TARGET$ = {
	# 	save_scope_as = vi_target
	# }

	scope:vi_target = {
		if = {
			limit = {
				vi_is_vampire_trigger = no
				NOT = {
					has_trait = vi_dhampir
				}
			}

			hidden_effect = {
				every_close_or_extended_family_member = {
					limit = {
						vi_is_vampire_trigger = no
					}
					add_opinion = {
						target = scope:vi_target
						modifier = suspicion_opinion
						value = -10
					}
				}
			}

			#Depose Rulers
			# if = {
			# 	limit = {
			# 		is_ruler = yes
			# 	}
			# 	add_character_flag = {
			# 		flag = abdicated_from_throne
			# 		days = 30
			# 	}
			# 	hidden_effect = {	#Make all weak claims on your titles into strong claims.
			# 		every_held_title = {
			# 			save_temporary_scope_as = abdicator_title
			# 			every_claimant = {
			# 				limit = { has_weak_claim_on = scope:abdicator_title }
			# 				make_claim_strong = scope:abdicator_title
			# 			}
			# 		}
			# 	}
			# 	depose = yes
			# }

			# add_trait = vi_vampire_1
			vi_make_vampire_effect = yes

			add_character_modifier = {
				modifier = vi_skittish_modifier
				years = 20
			}
			
			hidden_effect = {
				set_immortal_age = scope:vi_target.age
			}

			set_relation_vi_sire = scope:vi_vampire

			if = {
				limit = {
					scope:vi_vampire = {
						has_character_modifier = vi_Disian_modifier
					}
				}
				add_character_modifier = vi_Disian_modifier
			}
			if = {
				limit = {
					scope:vi_vampire = {
						has_character_modifier = vi_Anunnaki_modifier
					}
				}
				add_character_modifier = vi_Anunnaki_modifier
			}
			if = {
				limit = {
					scope:vi_vampire = {
						has_character_modifier = vi_Nosferatu_modifier
					}
				}
				add_character_modifier = vi_Nosferatu_modifier
			}
			if = {
				limit = {
					scope:vi_vampire = {
						has_character_modifier = vi_Strix_modifier
					}
				}
				add_character_modifier = vi_Strix_modifier
			}
			# scope:vi_vampire = {
			# 	adopt = scope:vi_target
			# }
			# set_character_faith = scope:vi_vampire.faith
			# set_house = scope:vi_vampire.house
			if = {
				limit = {
					is_landed = yes
					NOT = {
						has_story_of_type = story_vi_landed
					}
				}
				create_story = story_vi_landed
			}
		}
	}
}

vi_become_dormant_effect = {

	remove_character_modifier = vi_vampire_madness_modifier
	remove_character_modifier = vi_vampire_strain_modifier
	remove_character_modifier = vi_vampire_tiredness_modifier
	add_stress = -1000
	add_trait = vi_dormant

	add_character_flag = {
		flag = vi_recent_dormant
		years = 50
	}

	if = {
		limit = {
			is_ruler = yes
		}

		add_character_flag = {
			flag = abdicated_from_throne
			days = 30
		}
		hidden_effect = {	#Make all weak claims on your titles into strong claims.
			every_held_title = {
				save_temporary_scope_as = abdicator_title
				every_claimant = {
					limit = { has_weak_claim_on = scope:abdicator_title }
					make_claim_strong = scope:abdicator_title
				}
			}
		}
		depose = yes
	}

	if = {
		limit = {
			has_trait = vi_exposed_vampire
		}
		remove_trait = vi_exposed_vampire
		add_secret = {
			type = secret_vi_vampire
		}
	}

	every_scheme = {
		end_scheme = yes
	}
	
	every_targeting_scheme = {
		end_scheme = yes
	}
}

vi_add_stacking_modifier_effect = {
	if = {
		limit = { 
			$LEVEL$ > 0
		}
		save_scope_value_as = {
			name = modifier
			value = flag:$MODIFIER$
		}
		save_scope_value_as = {
			name = level
			value = $LEVEL$
		}
		save_scope_value_as = {
			name = years
			value = $YEARS$
		}
		hidden_effect = {
			set_local_variable = {
				name = for_counter
				value = 0
			}
			while = {
				limit = {
					exists = local_var:for_counter
					exists = scope:level
					scope:level > local_var:for_counter
				}
				if = {
					limit = { $YEARS$ > 0 }
					add_$TYPE$_modifier = { modifier = $MODIFIER$ years = $YEARS$ }
				}
				else = {
					add_$TYPE$_modifier = $MODIFIER$
				}
				change_local_variable = {
					name = for_counter
					add = 1
				}
			}
		}
	}
}

vi_secret_exposed_vampire_effect = {
	add_trait = vi_exposed_vampire
	#save_scope_as = vi_exposed_vampire
	liege ?= {
		if = {
			limit = {
				has_government = vi_vampire_government
			}
			send_interface_message = {
				type = send_interface_message_bad
				title = vi_vampire_exposed_msg
				desc = vi_vampire_exposed_msg_desc
				#tooltip = LOCALIZATION # optional, otherwise takes it from the message type
				left_icon = root # optional, character, artifact, or title
				#right_icon = scope:domicile_location # optional, character, artifact, or title
				goto = root # optional, character, barony title, province will add a goto button
				
				add_legitimacy = medium_legitimacy_loss
			}
			
		}	
	}
}

vi_hostile_scheme_monthly_discovery_chance_effect = {
	# If we're in the first X months of a scheme, give a grace period.
	if = {
		limit = {
			has_variable = secrecy_grace_period
			var:secrecy_grace_period >= 1
		}
		change_variable = {
			name = secrecy_grace_period
			add = -1
		}
	}
	# Otherwise we want to start checking for discovery.
	else_if = {
		# Without a spymaster, you can't discover schemes.
		## This isn't tooltipped for the person doing the scheming: communicating it (and when it turns on, and when it turns off) would be erratic and spammy, so we just let them think they're getting nice'n'lucky.
		limit = {
			scope:scheme = {
				# Character
				trigger_if = {
					limit = { exists = scheme_target_character.host }
					scheme_target_character.host = { save_temporary_scope_as = breach_host_temp }
				}
				# Title
				trigger_else_if = {
					limit = { exists = scheme_target_title.holder }
					scheme_target_title.holder = { save_temporary_scope_as = breach_host_temp }
				}
				# Fallback
				trigger_else = { always = no }
				scope:breach_host_temp ?= {
					# Second for Adventurers
					trigger_if = { 
						limit = { is_landless_adventurer = yes }
						court_position:second_camp_officer ?= { save_temporary_scope_as = breach_maker_temp }
					}
					# Spymaster for everyone else
					trigger_else = {
						cp:councillor_spymaster ?= { save_temporary_scope_as = breach_maker_temp }
					}
				}
			}
		}
		# Sort scopes.
		## Vs. titles.
		if = {
			limit = { exists = scope:target.holder }
			scope:target.holder = { save_scope_as = target_character }
		}
		## Vs. characters.
		else = {
			scope:target = { save_scope_as = target_character }
		}
		## Nab the spymaster too.
		scope:breach_maker_temp = { save_scope_as = spymaster }
		# Alright, now we roll for discovery.
		# Save chance for simple debugging
		save_scope_value_as = {
			name = discovery_chance
			value = monthly_scheme_discovery_chance_value
		}
		## ... if scope:target lives at scope:owner's court.
		if = {
			limit = {
				scope:breach_host_temp = scope:owner
				NOT = { exists = scope:scheme.var:had_self_court_discovery }
			}
			random = {
				chance = scope:discovery_chance
				# Either increment breaches.
				if = {
					limit = { scheme_breaches >= scheme_breaches_about_to_hit_limit_value }
					increment_breaches_with_message_effect = yes
				}
				# Or expose us generally.
				else = {
					add_scheme_breach = 1
					scheme_owner = { play_sound_effect = "event:/DLC/EP3/SFX/Stingers/Scheme_Rework/ep3_mx_sting_schemerework_scheme_suffering_breaches" }
					set_variable = {
						name = had_self_court_discovery
						value = yes
						years = 3
					}
					scope:owner = {
						if = {
							limit = {
								scope:scheme = { is_savable_murder_scheme_trigger = yes }
							}
							trigger_event = hostile_scheme_discovery.4002
						}
						else_if = {
							limit = {
								scope:scheme = {
									scheme_type = vi_investigate
								}
							}
							trigger_event = vi_investigate_secrets.011
						}
						else = { trigger_event = hostile_scheme_discovery.4001 }
					}
					# Flag that we're discovering something so that on-going events don't fire.
					save_scope_value_as = {
						name = discovery_event_happening
						value = yes
					}
				}
			}
		}
		## ... otherwise they're at different courts.
		else_if = {
			limit = {
				NOR = {
					# Spymaster won't expose their own Scheme
					scope:owner = scope:spymaster
					# Spymaster won't expose *your* (liege's) Scheme
					scope:owner = scope:spymaster.liege
					# Spymaster won't expose a scheme if they are an agent of it
					## Secrecy is still relevant, you can still be discovered, just not on the monthly tick.
					scheme_is_character_agent = scope:spymaster
				}
			}
			# Roll to see whether we discover something.
			random = {
				chance = scope:discovery_chance
				# If the scheme isn't exposed, then we do that first.
				if = {
					limit = { is_scheme_exposed = no }
					# Increment our breaches.
					increment_breaches_with_message_effect = yes
					# Fire off an actual warning event.
					scope:target_character.host ?= { trigger_event = hostile_scheme_discovery.2001 }
					# Flag that we're discovering something so that on-going events don't fire.
					save_scope_value_as = {
						name = discovery_event_happening
						value = yes
					}
				}
				# Else, that means we've hit the limit for the scheme, so we discover and destroy it.
				else_if = {
					limit = { scheme_breaches >= scheme_breaches_about_to_hit_limit_value }
					# Don't forget to increment breaches to max.
					add_scheme_breach = 1
					scheme_owner = { play_sound_effect = "event:/DLC/EP3/SFX/Stingers/Scheme_Rework/ep3_mx_sting_schemerework_scheme_suffering_breaches" }
					# Fire off the correct event.
					if = {
						limit = {
							scope:scheme = {
								scheme_type = vi_investigate
							}
						}
						scope:target_character.host ?= { trigger_event = vi_investigate_secrets.012 }
					}
					else = {
						scope:target_character.host ?= { trigger_event = hostile_scheme_discovery.1002 }
					}
					
					# Flag that we're discovering something so that on-going events don't fire.
					save_scope_value_as = {
						name = discovery_event_happening
						value = yes
					}
				}
				# Otherwise, we want to discover an agent.
				else = {
					# Increment our breaches.
					increment_breaches_with_message_effect = yes
					# And reveal an agent, if we can.
					if = {
						limit = {
							any_scheme_agent_character = {
								is_alive = yes
								agent_valid_to_be_discovered_by_spymaster = yes
							}
						}
						ordered_scheme_agent_character = {
							limit = {
								is_alive = yes
								agent_valid_to_be_discovered_by_spymaster = yes
							}
							# Get the least stealthy agent.
							order_by = {
								value = 100
								subtract = intrigue
							}
							save_scope_as = agent
						}
						# If we have a candidate, reveal them.
						scope:target_character.host ?= { trigger_event = hostile_scheme_discovery.1001 }
						# Flag that we're discovering something so that on-going events don't fire.
						save_scope_value_as = {
							name = discovery_event_happening
							value = yes
						}
					}
				}
			}
		}
	}
}

vi_on_perk_added_effect = {
	if = {
		limit = {
			is_ai = no
			years_from_game_start > 1
		}
		add_stress = medium_stress_gain
	}
	custom_description_no_bullet = {
		text = vi_night_perk_effect
	}
}

vi_consider_excommunicated_list = {
	if = {
		limit = {
			faith = faith:vi_nightcourt
			NOT = {
				any_scheme = {
					is_scheme_category = hostile
				}
			}
		}
		save_scope_as = exc_hunter
		random_in_global_list = {
			variable = vi_nightcourt_excommunicated
			limit = {
				is_alive = yes
				has_character_modifier = vi_excommunicated_modifier
				scope:exc_hunter = {
					opinion = {
						target = prev
						value < -20
					}
				}
				prowess < scope:exc_hunter.prowess
			}
			save_scope_as = exc_target
		}

		begin_scheme_basic_effect = {
			SCHEME_TYPE = vi_hunt
			TARGET_TYPE = target_character
			TARGET_SCOPE = scope:exc_target
		}
	}
}

vi_slow_regeneration_effect = {
	
		random_list = {
			10 = {
				add_stress = -5
			}
			100 = {
				trigger = {
					has_trait = incapable
				}
				send_interface_toast = {
					title = vampire_healing_msg
					remove_trait = incapable
					add_stress = 50
				}
			}
			40 = {
				trigger = {
					has_trait = wounded_1
				}
				send_interface_toast = {
					title = vampire_healing_msg
					remove_trait = wounded_1
					add_stress = 5
				}
			}
			40 = {
				trigger = {
					has_trait = wounded_2
				}
				send_interface_toast = {
					title = vampire_healing_msg
					remove_trait = wounded_2
					add_stress = 10
				}
			}
			40 = {
				trigger = {
					has_trait = wounded_3
				}
				send_interface_toast = {
					title = vampire_healing_msg
					add_character_modifier = {
						modifier = vi_vampire_strain_modifier
						years = 1
					}
					
					remove_trait = wounded_3
					add_stress = 20
				}
			}
			40 = {
				trigger = {
					has_trait = maimed
				}
				send_interface_toast = {
					title = vampire_healing_msg
					add_character_modifier = {
						modifier = vi_vampire_strain_modifier
						years = 3
					}
					remove_trait = maimed
					add_stress = 25
				}
			}
			30 = {
				trigger = {
					has_trait = one_legged
				}
				send_interface_toast = {
					title = vampire_healing_msg
					add_character_modifier = {
						modifier = vi_vampire_strain_modifier
						years = 2
					}
					remove_trait = one_legged
					add_stress = 25
				}
			}
			30 = {
				trigger = {
					has_trait = infirm
				}
				send_interface_toast = {
					title = vampire_healing_msg
					add_character_modifier = {
						modifier = vi_vampire_strain_modifier
						years = 5
					}
					remove_trait = infirm
					add_stress = 20
				}
			}
			10 = {
				trigger = {
					NOT = {
						has_character_flag = vi_permanently_disfigured
					}
					has_trait = disfigured
				}
				send_interface_toast = {
					title = vampire_healing_msg
					add_character_modifier = {
						modifier = vi_vampire_strain_modifier
						years = 2
					}
					remove_trait = disfigured
					add_stress = 10
				}
			}
			10 = {
				trigger = {
					NOT = {
						has_character_flag = vi_permanently_one_eyed
					}
					has_trait = one_eyed
				}
				send_interface_toast = {
					title = vampire_healing_msg
					add_character_modifier = {
						modifier = vi_vampire_strain_modifier
						years = 1
					}
					remove_trait = one_eyed
					add_stress = 10
				}
			}
			10 = {
				trigger = {
					NOT = {
						has_character_flag = vi_permanently_blind
					}
					has_trait = blind
				}
				send_interface_toast = {
					title = vampire_healing_msg
					add_character_modifier = {
						modifier = vi_vampire_strain_modifier
						years = 3
					}
					remove_trait = blind
					add_stress = 20
				}
			}
			5 = {
				trigger = {
					has_trait = scarred
					is_ai = yes
				}
				remove_trait = scarred
				add_stress = 5
			}
			10 = {
				trigger = {
					NOT = {
						has_character_flag = vi_permanently_eunuch
					}
					OR = {
						has_trait = eunuch_1
						has_trait = beardless_eunuch
					}
				}
				send_interface_toast = {
					title = vampire_healing_msg
					add_character_modifier = {
						modifier = vi_vampire_strain_modifier
						years = 1
					}
					if = {
						limit = { has_trait = eunuch_1 }
						remove_trait = eunuch_1
					}
					if = {
						limit = { has_trait = beardless_eunuch }
						remove_trait = beardless_eunuch
					}
					add_stress = 20
				}
			}
		}
}