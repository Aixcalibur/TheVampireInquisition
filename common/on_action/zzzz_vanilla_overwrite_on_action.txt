#THIS IS ESSENTIAL FOR THE MOD TO STOP DELETING UNLANDED NOMAD CAMPS
yearly_playable_pulse = {
	effect = {
		ai_budget_manipulation_effect = yes
		if = {
			limit = {
				government_has_flag = government_is_mercenary
				culture = {
					has_cultural_parameter = mercenary_courtiers_gain_extra_skills
				}
			}
			knight_increase_prowess_chance_effect = yes
			every_courtier = {
				limit = {
					is_knight = yes
				}
				knight_increase_prowess_chance_effect = yes
			}
		}
		# Assign or level up court type trait for courtiers in a royal court
		if = {
			limit = {
				has_royal_court = yes
				has_dlc_feature = royal_court
			}
			assign_court_type_traits_to_courtiers_effect = yes
		}
		# Yurt domicile bonuses distribution
		if = {
			limit = {
				government_has_flag = government_is_nomadic
				exists = domicile
			}
			#Dynasty of Many Khans
			mpo_yearly_dynasty_of_many_khans_effect = yes
			
			#Yearly yurt rewards
			domicile ?= {
				if = {
					limit = {				
						OR = {
							has_domicile_building_or_higher = family_yurt_01
							has_domicile_building_or_higher = mystical_yurt_01
							has_domicile_building_or_higher = court_yurt_01
						}
					}
					mpo_yearly_yurt_rewards_effect = yes
				}
			}
		}

		# Yearly house head opinion update: to change into only one log maybe?
		if = {
			limit = {
				government_has_flag = government_is_clan
				exists = house
				is_house_head = yes
			}
			save_scope_as = unity_target
			if = {
				limit = {
					OR = {
						has_character_flag = steer_unity_towards_harmonious_passive_gain
						has_character_flag = steer_unity_towards_antagonistic_passive_loss
					}
				}
				house = {
					add_unity_value = {
						value = {
							if = {
								limit = { root = { has_character_flag = steer_unity_towards_harmonious_passive_gain } }
								add = medium_unity_gain
							}
							else = {
								add = medium_unity_loss
							}
						}
						character = root
						desc = clan_unity_steer_direction_passive_change.desc
					}
				}
			}
			else = {
				house = {
					set_variable = {
						name = house_opinion_unity_impact
						value = 0
					}
					every_house_member = {
						limit = {
							is_house_head = no
							is_adult = yes
						}
						if = {
							limit = {
								opinion = {
									target = scope:unity_target
									value >= low_positive_opinion
								}
							}
							prev = {
								change_variable = {
									name = house_opinion_unity_impact
									add = miniscule_unity_value
								}
							}
							if = {
								limit = {
									opinion = {
										target = scope:unity_target
										value >= high_positive_opinion
									}
								}
								prev = {
									change_variable = {
										name = house_opinion_unity_impact
										add = minor_unity_value
									}
								}

							}
						}
						else = {
							prev = {
								change_variable = {
									name = house_opinion_unity_impact
									subtract = miniscule_unity_value
								}
							}

							if = {
								limit = {
									opinion = {
										target = scope:unity_target
										value <= high_negative_opinion
									}
								}
								prev = {
									change_variable = {
										name = house_opinion_unity_impact
										subtract = minor_unity_value
									}
								}
							}
						}
					}
					if = {
						limit = { var:house_opinion_unity_impact != 0 }
						add_unity_value = {
							value = {
								if = {
									limit = { var:house_opinion_unity_impact > 0 }
									add = minor_unity_gain
								}
								else = {
									add = minor_unity_loss
								}
							}
							character = root
							desc = clan_unity_generic_average_yearly_opinion_house_head.desc
						}
					}
				}
			}
		}
		
		# ADMINISTRATIVE GOVERNMENT
		# Governor contract generation
		if = {
			limit = {
				is_governor = yes
				trigger_if = {
					limit = { is_ai = yes }
					is_available = yes
				}
			}
			random = {
				chance = {
					value = 70
					if = {
						limit = { has_character_flag = admin_governance_frequency_cooldown }
						subtract = 50
					}
				}
				spawn_governance_contract_effect = yes
			}
		}

		# Failsafe to ensure we don't get independent admin rulers of too low a rank (i.e. below king)
		if = {
			limit = {
				liege = root # I.e. root is independent
				government_has_flag = government_is_administrative
				highest_held_title_tier < tier_kingdom
			}
			if = { # If we are looking at an independent landless character, let's destroy their title
				limit = {
					is_landed = no
				}
				destroy_title = primary_title
			}
			else = { # Otherwise, they change government
				admin_change_government_effect = yes
				if = {
					limit = {
						any_held_title = {
							is_noble_family_title = yes
						}
					}
					every_held_title = {
						limit = {
							is_noble_family_title = yes
						}
						save_temporary_scope_as = family_title
						root = { destroy_title = scope:family_title }
					}
				}
			}
		}
		# Failsafe to ensure we don't have a noble family holding land without other titles - Give any held land to liege
		if = {
			limit = {
				government_has_flag = government_is_administrative
				is_landed = yes
				exists = liege
				NOT = { liege = root }
				any_held_title = { # They have a noble family title
					is_noble_family_title = yes
				}
				NOT = { # And no other high tier titles
					any_held_title = {
						tier >= tier_duchy
						is_noble_family_title = no
					}
				}
			}
			create_title_and_vassal_change = {
				type = revoked
				save_scope_as = change
				add_claim_on_loss = no
			}
			every_held_title = {
				limit = {
					tier = tier_county
				}
				add_to_list = revoked_titles
			}
			every_in_list = {
				list = revoked_titles
				change_title_holder_include_vassals = {
					holder = root.liege
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
		}
		
		if = {
			limit = {
				has_character_flag = tournament_ai_override
			}
			ai_attempt_to_host_activity = activity_tournament
		}
		else_if = {
			limit = {
				has_character_flag = feast_ai_override
			}
			ai_attempt_to_host_activity = activity_feast
		}

		# Scalable Modifiers which needs to be reapplied
		hidden_effect = {
			if = {
				limit = {
					has_character_modifier = church_investment_modifier
				}
				remove_character_modifier = church_investment_modifier
				add_character_modifier = church_investment_modifier
			}
		}
		if = {
			limit = {
				has_perk = learn_on_the_job_perk
				is_landless_adventurer = yes
			}
			every_courtier = {
				limit = {
					is_physically_able_adult = yes
					NOT = { exists = inspiration }
				}
				random = {
					chance = {
						value = 0
						add = {
							value = book_inspiration_average_skill_value
							if = {
								limit = {
									has_trait = lazy
								}
								multiply = 0.5
							}
							if = {
								limit = {
									root = {
										any_courtier = {
											exists = inspiration
										}
									}
								}
								multiply = 0.5
							}
						}
					}
					create_inspiration = book_inspiration
					save_scope_as = inspired_follower
					root = {
						send_interface_message = {
							type = send_interface_message_good
							title = adventurers_gather_inspiration_option.title
							left_icon = scope:inspired_follower
							scope:inspired_follower = {
								custom_tooltip = {
									text = adventurers_gather_inspiration_option.effect
								}
							}
						}
					}
				}
			}
		}
		# AI Adventurer contract logic setup
		if = {
			limit = {
				ep3_adventurer_ai_logic_valid_trigger = yes
				NOT = { owns_story_of_type = story_adventurer_ai }
			}
			create_story = { type = story_adventurer_ai }
		}
		if = { # If a player adventurer manages to glitch in place, save them by moving them to the domicile location
			limit = {
				is_ai = no
				is_landless_adventurer = yes
				NOT = {
					location = domicile.domicile_location
				}
				is_imprisoned = no
				is_travelling = no
				NOT = {
					exists = involved_activity
				}
				num_taken_task_contracts <= 0
				is_commanding_army = no
			}
			set_location_to_default = yes
		}
		if = {	
			limit = {
				NOT = {
					top_liege ?= {
						is_confederation_member = yes
					}
				}
				has_character_modifier = mpo_confederation_member_modifier
			}
			remove_character_modifier = mpo_confederation_member_modifier
		}
		# Stray player Herders get turned into Nomads
		if = {
			limit = {
				is_ai = no
				government_has_flag = government_is_herder
			}
			every_held_title = {
				limit = {
					tier = tier_county
					title_province = {
						has_holding_type = herder_holding
					}
				}
				title_province = {
					set_holding_type = nomad_holding
				}
			}
			change_government = nomad_government
		}
		
		######################
		# Various safeguarding against realm setups with landless participants
		######################
		if = {
			limit = {
				is_landed = no
				NOT = {
					has_government = vi_vampire_government
				}
			}
			
			save_scope_as = scoped_ruler
			
			######################
			# Repair realms with Landless participants having vassals
			######################
			
			if = {
				limit = {
					any_sub_realm_county = {
						is_landless_type_title = no
					}
				}
				
				######################
				# Landless Lieges with Landed Vassals should take a County from a Vassal
				######################
				
				if = {
					limit = { # Make sure we repair realms in the right order
						OR = {
							this = top_liege
							liege ?= {
								is_landed = yes
							}
						}
					}
					create_title_and_vassal_change = {
						type = revoked
						save_scope_as = change
					}
					random_sub_realm_county = {
						limit = {
							is_landless_type_title = no
						}
						weight = {
							modifier = {
								add = 100
								this = scope:scoped_ruler.primary_title.title_capital_county
							}
							modifier = {
								add = -100
								holder = {
									is_ai = no
								}
							}
						}
						change_title_holder = {
							holder = scope:scoped_ruler
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
					
					######################
					# Landless vassals with Landed vassals should take something and become landed
					######################
					
					every_vassal = {
						limit = {
							is_landed = no
							any_sub_realm_county = {
								is_landless_type_title = no
							}
						}
						save_scope_as = vassal_ruler
						create_title_and_vassal_change = {
							type = revoked
							save_scope_as = change
						}
						random_sub_realm_county = {
							limit = {
								is_landless_type_title = no
							}
							weight = {
								modifier = {
									add = 100
									this = scope:vassal_ruler.primary_title.title_capital_county
								}
								modifier = {
									add = -100
									holder = {
										is_ai = no
									}
								}
							}
							change_title_holder = {
								holder = scope:vassal_ruler
								change = scope:change
							}
						}
						resolve_title_and_vassal_change = scope:change
					}
				}
			}
			
			######################
			# Destroy the AI's landless nomad vassals, as they'll just bloat the game for no gain
			######################
			
			else_if = {
				limit = {
					is_ai = yes
					top_liege != this
					government_has_flag = government_is_nomadic
					is_landed = no
					liege = { is_ai = yes }
				}
				every_held_title = {
					limit = {
						is_nomad_title = yes
					}
					scope:scoped_ruler = {
						destroy_title = prev
					}
				}
			}
			# Players become independent so they can migrate
			else_if = {
				limit = {
					is_ai = no
					top_liege != this
					government_has_flag = government_is_nomadic
					is_landed = no
					liege = { is_ai = yes }
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
			}
			
			######################
			# AI's with a Nomadic Camp title that somehow end up with the wrong government and landless should be purged
			######################
			
			if = {
				limit = {
					NOT = { government_has_flag = government_is_nomadic }
					any_held_title = {
						is_nomad_title = yes
					}
				}
				save_scope_as = scoped_ruler
				if = {
					limit = {
						is_ai = yes
					}
					every_held_title = {
						limit = {
							is_nomad_title = yes
						}
						scope:scoped_ruler = {
							destroy_title = prev
						}
					}
				}
				# Players are saved
				else_if = {
					limit = {
						is_ai = no
					}
					change_government = nomad_government
				}
			}
			
			######################
			# Landless nomads outside any migration area? Cleanup.
			######################
			
			if = {
				limit = {
					is_ai = yes
					top_liege = this
					NOT = {
						any_character_situation = {
							any_participant_group = {
								participant_group_type = nomad_rulers_capital
								participant_group_has_character = scope:scoped_ruler
							}
						}
					}
					any_held_title = {
						is_nomad_title = yes
					}
				}
				every_held_title = {
					limit = {
						is_nomad_title = yes
					}
					scope:scoped_ruler = {
						destroy_title = prev
					}
				}
			}
		}
	}
	# events = {
	# 	court_maintenance.0012 # Dynasty banner improves with renown
	# 	court_maintenance.0013 # Remove duplicate dynasty banners
	# }
	# on_actions = {
	# 	ai_character_pulse
	# 	delay = { days = 75 }

	# 	pagan_conversion_pulse
	# }
}

three_year_playable_pulse = {
	# events = {
	# 	adultery.0001 #Suspected spouse/soulmate of cheating (increased chance when there is a lover, but can also trigger otherwise)
	# }
	# random_events = {
	# 	800 = 0
	# 	200 = global_culture.3011
	# 	600 = global_culture.3012
	# }
	effect = {
		if = { # Nomadic herd starves if you're landless
			limit = {
				is_landed = no
				government_has_flag = government_is_nomadic
				exists = domicile
				is_migrating = no
				is_at_war = no
			}
			if = {
				limit = {
					domicile.herd > 500
				}
				change_current_weight = -25
				every_courtier = {
					change_current_weight = -25
				}
				send_interface_toast = {
					type = event_toast_effect_bad
					title = herd_starvation_title
					left_icon = root
					custom_tooltip = herd_starvation_custom_tooltip
					domicile ?= {
						change_herd = {
							value = root.domicile.herd
							divide = 3
							min = 500
							if = {
								limit = {
									root = { is_ai = yes }
								}
								min = 1000
							}
							multiply = -1
						}
					}
				}
			}
			clean_up_ai_nomad_effect = yes
		}
		if = { # Various nomadic safeguards
			limit = {
				is_landed = yes
				NOR = {
					government_has_flag = government_is_nomadic
					government_has_flag = government_is_herder
				}
			}
			
			save_scope_as = scoped_ruler
			
			######################
			# Nomadic titles that end up with non-nomadic holders are destroyed
			######################
			if = {
				limit = {
					any_held_title = {
						is_nomad_title = yes
                        title_domicile ?= {
                            is_domicile_type = yurt
                        }
					}
				}
				every_held_title = {
					limit = {
						is_nomad_title = yes
					}
					scope:scoped_ruler = {
						destroy_title = prev
					}
				}
			}
			
			######################
			# Anyone who *only* holds Nomadic lands should become Nomadic
			######################
			
			if = {
				limit = {
					highest_held_title_tier >= tier_county
					capital_province = {
						OR = {
							has_holding_type = nomad_holding
							has_holding_type = herder_holding
						}
					}
					NOT = {
						any_held_title = {
							tier = tier_county
							is_landless_type_title = no
							title_province = {
								NOR = {
									has_holding_type = nomad_holding
									has_holding_type = herder_holding
								}
							}
						}
					}
				}
				every_held_title = {
					limit = {
						tier = tier_county
						title_province = {
							has_holding_type = herder_holding
						}
					}
					title_province = {
						set_holding_type = nomad_holding
					}
				}
				change_government = nomad_government
				
				# We don't want overly-funky nomad camps to spring up, so set an appropriate culture/faith
				if = {
					limit = {
						domicile.domicile_culture != capital_county.culture
					}
					domicile = {
						set_domicile_culture = scope:scoped_ruler.capital_county.culture
					}
				}
				if = {
					limit = {
						domicile.domicile_faith != capital_county.faith
					}
					domicile = {
						set_domicile_faith = scope:scoped_ruler.capital_county.faith
					}
				}
			}
		}
		else_if = {
			limit = {
				government_has_flag = government_is_nomadic
				is_ruler = yes
			}
			
			save_scope_as = scoped_ruler
			
			######################
			# If you end up losing your Nomadic Capital, get a new one
			######################
			
			if = {
				limit = {
					NOT = {
						any_held_title = {
							is_nomad_title = yes
						}
					}
				}
				create_nomad_title = {
					name = nomad_title_name
					holder = scope:scoped_ruler
					government = nomad_government
					save_scope_as = new_nomad_title
				}
				domicile ?= {
					add_domicile_building = yurt_main_02
					add_domicile_building = yurt_main_03
					add_random_yurt_external_building_effect = yes
					add_random_yurt_external_building_effect = yes
					upgrade_random_yurt_external_building_effect = yes
					upgrade_random_yurt_external_building_effect = yes
				}
			}
			
			######################
			# If your nomadic capital domicile somehow gets lost, move it to your capital province
			######################
			
			if = {
				limit = {
					is_at_war = no
					exists = domicile
					domicile.domicile_location != capital_province
				}
				domicile = { move_domicile = scope:scoped_ruler.capital_province }
			}
		}
	}
}

on_vassal_gained = {
	events = {
		realm_maintenance.1000 # Notify vassals of new liege
	}
	effect = {
		#Confederation members must be independent
		if = {
			limit = {
				scope:vassal = {
					is_confederation_member = yes
				}
			}
			scope:vassal.confederation = {
				remove_confederation_member = scope:vassal
			}
		}
		# EP3 LANDLESS CANNOT HAVE VASSALS
		if = {
			limit = {
				has_any_landed_title_trigger = no
				NOT = {
					has_government = vi_vampire_government
				}
			}
			save_scope_as = new_liege
			if = {
				limit = { is_independent_ruler = no }
				create_title_and_vassal_change = {
					type = swear_fealty
					save_scope_as = change
					add_claim_on_loss = no
				}
				change_liege = {
					liege = scope:new_liege.liege
					change = scope:change
				}
				resolve_title_and_vassal_change = scope:change
			}
			else = {
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				scope:vassal = {
					becomes_independent = { change = scope:change }
				}
				resolve_title_and_vassal_change = scope:change
			}
		}

		# Additional Flavor Title
		scope:vassal = {
			additional_flavor_check_effect = yes
		}
	}
}
# on_vassal_gained = {
# 	events = {
# 		#realm_maintenance.1000 # Notify vassals of new liege
# 	}
# 	on_actions = {
# 		vi_on_vassal_gained
# 	}
# 	effect = {
# 		# EP3 LANDLESS CANNOT HAVE VASSALS
# 		if = {
# 			limit = {
# 				has_any_landed_title_trigger = no
# 				NOT = {
# 					has_government = vi_vampire_government
# 				}
# 			}
# 			save_scope_as = new_liege
# 			if = {
# 				limit = { is_independent_ruler = no }
# 				create_title_and_vassal_change = {
# 					type = swear_fealty
# 					save_scope_as = change
# 					add_claim_on_loss = no
# 				}
# 				change_liege = {
# 					liege = scope:new_liege.liege
# 					change = scope:change
# 				}
# 				resolve_title_and_vassal_change = scope:change
# 			}
# 			else = {
# 				create_title_and_vassal_change = {
# 					type = independency
# 					save_scope_as = change
# 					add_claim_on_loss = no
# 				}
# 				scope:vassal = {
# 					becomes_independent = { change = scope:change }
# 				}
# 				resolve_title_and_vassal_change = scope:change
# 			}
# 		}

# 		# Additional Flavor Title
# 		scope:vassal = {
# 			additional_flavor_check_effect = yes
# 		}
# 	}
# }

on_vassal_change = {
	effect = {
		if = {
			limit = {
				OR = {
					liege ?= {
						NOT = {
							government_allows = administrative
							has_government = vi_vampire_government
						}
					}
					AND = {
						is_independent_ruler = yes
						primary_title.tier <= tier_duchy
					}
				}
				any_held_title = { is_noble_family_title = yes }
			}
			every_held_title = {
				limit = { is_noble_family_title = yes }
				save_scope_as = title_to_destroy
				root = { destroy_title = scope:title_to_destroy }
			}
		}
		### GOVERNORS CHANGE GOVERNMENT IF NEW LIEGE IS NOT ADMINISTRATIVE
		if = {
			limit = {
				exists = top_liege
				government_has_flag = government_is_administrative
				NOT = {
					top_liege = { government_has_flag = government_is_administrative }
				}
			}
			top_liege = { save_scope_as = new_liege }
			send_interface_message = {
				type = msg_government_changed
				title = new_liege_government_changed_title
				desc = new_liege_government_changed_desc
				right_icon = scope:new_liege
				admin_change_government_effect = yes
			}
			hidden_effect = {
				# VASSALS AND BELOW
				every_vassal_or_below = {
					limit = { government_has_flag = government_is_administrative }
					send_interface_message = {
						type = msg_government_changed
						title = new_liege_government_changed_title
						desc = new_liege_government_changed_desc
						right_icon = scope:new_liege
						admin_change_government_effect = yes
					}
				}
			}
		}
		### If a admin duke-tier character becomes the top-liege's direct vassal, ensure that they have a noble family title
		if = {
			limit = {
				government_allows = administrative
				is_house_head = yes
				highest_held_title_tier >= tier_duchy
				liege = {
					is_independent_ruler = yes
					government_allows = administrative
				}
				NOR = {
					any_held_title = { is_noble_family_title = yes }
					house = {
						any_house_member = {
							any_held_title = { is_noble_family_title = yes }
						}
					}
				}
			}
			create_noble_family_effect = yes
			domicile ?= { set_up_domicile_estate_effect = yes }
		}
		### If an admin ruler becomes independent, who are not of a high enough rank, changes government
		if = {
			limit = {
				liege = root # I.e. root is independent
				government_has_flag = government_is_administrative
				highest_held_title_tier < tier_kingdom
			}
			admin_change_government_effect = yes
		}

		# Additional Flavor Title
		additional_flavor_check_effect = yes
	}
}